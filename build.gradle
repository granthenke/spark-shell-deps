plugins {
  // Add plugin for remote deploy
  id 'org.hidetake.ssh' version '1.1.3'
  // Add plugin for version updates
  id 'com.github.ben-manes.versions' version '0.11.3'
  // Add plugin for fatjar creation
  id 'com.github.johnrengelman.shadow' version '1.2.2'
}

// Add language plugins
apply plugin: "java"
apply plugin: "scala"

// Add Provided Dependency Support
configurations { providedCompile }
sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

// Import config variables
apply from: "$rootDir/config.gradle"

// Add maven repositories
repositories {
    maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    mavenCentral()
    mavenLocal()
}

// Add dependencies
dependencies {
    // Add Spark dependency from config.gradle
    providedCompile(sparkDependency)

    // Add dependencies from config.gradle
    compile(additionalSparkDependencies)
    compile(customDependencies)
}

// Only consider release artifacts for dependency updates
dependencyUpdates {
  revision = "release"
}

// Configure shadow jar output
shadowJar {
  // overlays default jar
  baseName = 'spark-shell-deps'
  classifier = ''
  // Set zip64 to true to support jars with > 65535 file or larger than 4GB
  zip64 = true
}

// Task to create artifact with all runtime dependencies. 
// This is a just an alias for shadowJar.
task allDepsJar(dependsOn: shadowJar)

// Task to deploy artifact jars locally
task deployLocal(type: Copy, dependsOn: allDepsJar, group: "Deploy") {
    from "${buildDir}/libs/${project.name}-${project.version}.jar"
    into "${localDeployPath}"
}

// Set up the Remote connection for SSH
remotes {
  server {
    host = "${remoteDeployHost}"
    user = "${remoteDeployUser}"
  }
}

// Task to deploy artifact jars to a remote server
task deployRemote(dependsOn: allDepsJar, group: "Deploy") << {
  def passInput = System.console().readPassword("\nPlease enter the password for ${remoteDeployUser}@${remoteDeployHost}:\n")
  remotes.server.password = "${passInput}"

  println 'Deploying...'

  ssh.run {
    session(remotes.server) {
      execute("mkdir -p ${remoteDeployPath}")
      put "${buildDir}/libs/${project.name}-${project.version}.jar", "${remoteDeployPath}/"
    }
  }
}

// Configure wrapper
task wrapper(type: Wrapper) { gradleVersion = "2.5" }
